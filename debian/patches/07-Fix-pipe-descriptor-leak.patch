From: Thomas HAMEL <thomas-externe.hamel@edf.fr>
Date: Wed, 11 Apr 2018 18:52:12 +0200
Subject: Fix pipe descriptor leak

This patch is meant to fix the bug described in:
https://bugs.launchpad.net/lightdm/+bug/1190344

It cherry picks to patches from upstream:
https://bazaar.launchpad.net/~lightdm-team/lightdm/1.10/revision/1986
https://bazaar.launchpad.net/~lightdm-team/lightdm/1.10/revision/1994

Close session pipe when child process exits - this was leaking file
descriptors for each login / authentication

Close greeter pipe when greeter exits - this was leaking file
descriptors for each time you returned to the greeter

Original commits by: Robert Ancell
---
 src/greeter.c | 25 +++++++++++++++++--------
 src/session.c |  2 ++
 2 files changed, 19 insertions(+), 8 deletions(-)

diff --git a/src/greeter.c b/src/greeter.c
index 25f3ed2..cf4af55 100644
--- a/src/greeter.c
+++ b/src/greeter.c
@@ -73,6 +73,8 @@ struct GreeterPrivate
     gboolean guest_account_authenticated;
 
     /* Communication channels to communicate with */
+    int to_greeter_input;
+    int from_greeter_output;
     GIOChannel *to_greeter_channel;
     GIOChannel *from_greeter_channel;
     guint from_greeter_watch;
@@ -898,6 +900,7 @@ greeter_start (Session *session)
 {
     Greeter *greeter = GREETER (session);
     int to_greeter_pipe[2], from_greeter_pipe[2];
+    int to_greeter_output, from_greeter_input;
     gboolean result = FALSE;
     gchar *value;
 
@@ -907,30 +910,34 @@ greeter_start (Session *session)
         g_warning ("Failed to create pipes: %s", strerror (errno));
         return FALSE;
     }
-    greeter->priv->to_greeter_channel = g_io_channel_unix_new (to_greeter_pipe[1]);
+    to_greeter_output = to_greeter_pipe[0];
+    greeter->priv->to_greeter_input = to_greeter_pipe[1];
+    greeter->priv->to_greeter_channel = g_io_channel_unix_new (greeter->priv->to_greeter_input);
     g_io_channel_set_encoding (greeter->priv->to_greeter_channel, NULL, NULL);
-    greeter->priv->from_greeter_channel = g_io_channel_unix_new (from_greeter_pipe[0]);
+    greeter->priv->from_greeter_output = from_greeter_pipe[0];
+    from_greeter_input = from_greeter_pipe[1];
+    greeter->priv->from_greeter_channel = g_io_channel_unix_new (greeter->priv->from_greeter_output);
     g_io_channel_set_encoding (greeter->priv->from_greeter_channel, NULL, NULL);
     g_io_channel_set_buffered (greeter->priv->from_greeter_channel, FALSE);
     greeter->priv->from_greeter_watch = g_io_add_watch (greeter->priv->from_greeter_channel, G_IO_IN | G_IO_HUP, read_cb, greeter);
 
     /* Let the greeter session know how to communicate with the daemon */
-    value = g_strdup_printf ("%d", from_greeter_pipe[1]);
+    value = g_strdup_printf ("%d", from_greeter_input);
     session_set_env (SESSION (greeter), "LIGHTDM_TO_SERVER_FD", value);
     g_free (value);
-    value = g_strdup_printf ("%d", to_greeter_pipe[0]);
+    value = g_strdup_printf ("%d", to_greeter_output);
     session_set_env (SESSION (greeter), "LIGHTDM_FROM_SERVER_FD", value);
     g_free (value);
 
     /* Don't allow the daemon end of the pipes to be accessed in child processes */
-    fcntl (to_greeter_pipe[1], F_SETFD, FD_CLOEXEC);
-    fcntl (from_greeter_pipe[0], F_SETFD, FD_CLOEXEC);
+    fcntl (greeter->priv->to_greeter_input, F_SETFD, FD_CLOEXEC);
+    fcntl (greeter->priv->from_greeter_output, F_SETFD, FD_CLOEXEC);
 
     result = SESSION_CLASS (greeter_parent_class)->start (session);
 
     /* Close the session ends of the pipe */
-    close (to_greeter_pipe[0]);
-    close (from_greeter_pipe[1]);
+    close (to_greeter_output);
+    close (from_greeter_input);
 
     return result;
 }
@@ -986,6 +993,8 @@ greeter_finalize (GObject *object)
         g_signal_handlers_disconnect_matched (self->priv->authentication_session, G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, self);
         g_object_unref (self->priv->authentication_session);
     }
+    close (self->priv->to_greeter_input);
+    close (self->priv->from_greeter_output);
     if (self->priv->to_greeter_channel)
         g_io_channel_unref (self->priv->to_greeter_channel);
     if (self->priv->from_greeter_channel)
diff --git a/src/session.c b/src/session.c
index 5169bbd..fe85d4b 100644
--- a/src/session.c
+++ b/src/session.c
@@ -917,6 +917,8 @@ session_finalize (GObject *object)
         g_object_unref (self->priv->display_server);
     if (self->priv->pid)
         kill (self->priv->pid, SIGKILL);
+    close (self->priv->to_child_input);
+    close (self->priv->from_child_output);
     if (self->priv->from_child_channel)
         g_io_channel_unref (self->priv->from_child_channel);
     if (self->priv->from_child_watch)
